@document.meta
title: Neovim Config
description: My personal neovim config
authors: Simon H Moore
categories: [
  config
  neovim
  lua
]
tangle: {
  languages: {
    lua: ./lua/config.lua
  }
}
created: 2024-03-06T23:01:44+0100
updated: 2024-03-17T22:45:07+0100
version: 1.1.1
@end

* SETUP VARIABLES AND FUNCTIONS
** API Variables
   Declare common API variables, will be used throughout the config.
   ___
   @table
   | Variable | Value   | Descriptions           |
   |----------+---------+------------------------|
   | o        | vim.opt | Inbuilt vim options    |
   | g        | vim.g   | Inbuilt global options |
   | cmd      | vim.cmd | Run vim ex commands    |
   @end

  @code lua
  local o = vim.opt
  local g = vim.g
  local cmd = vim.cmd
  @end

** Global Print Table Function
   The `P()` function can be used globally to print a lua table for inspection.
   ___
  @code lua
  P = function(v)
    print(vim.inspect(v))
    return v
  end
   @end

** Lazy Helper Function
   The `plug()` function is used to add plugins to the `plugins` table.
   The `plugins` table will be used by lazy to install and load plugins.
   ___
  @code lua
  local plugins = {}
  
  function plug(plugin)
    plugins[#plugins +1] = plugin
  end
  @end

* OPTIONS
  Configure inbuilt Neovim options.
  ___
  @code lua
  o.autowrite = true           -- Enable auto write
  o.clipboard = "unnamedplus"  -- Sync with system clipboard
  o.completeopt = "menu,menuone,noselect"
  o.conceallevel = 3           -- Hide * markup for bold and italic
  o.confirm = true             -- Confirm to save changes before exiting modified buffer
  o.cursorline = true          -- Enable highlighting of the current line
  o.expandtab = true           -- Use spaces instead of tabs
  o.formatoptions = "jcroqlnt" -- tcqj
  o.grepformat = "%f:%l:%c:%m"
  o.grepprg = "rg --vimgrep"
  o.ignorecase = true      -- Ignore case
  o.inccommand = "nosplit" -- preview incremental substitute
  o.laststatus = 0
  o.list = true            -- Show some invisible characters (tabs...
  o.mouse = "a"            -- Enable mouse mode
  o.number = true          -- Print line number
  o.pumblend = 10          -- Popup blend
  o.pumheight = 10         -- Maximum number of entries in a popup
  o.relativenumber = true  -- Relative line numbers
  o.scrolloff = 4          -- Lines of context
  o.sessionoptions = { "buffers", "curdir", "tabpages", "winsize" }
  o.shiftround = true      -- Round indent
  o.shiftwidth = 2         -- Size of an indent
  o.shortmess:append({ W = true, I = true, c = true })
  o.showmode = false       -- Dont show mode since we have a statusline
  o.sidescrolloff = 8      -- Columns of context
  o.signcolumn = "yes"     -- Always show the signcolumn, otherwise it would shift the text each time
  o.smartcase = true       -- Don't ignore case with capitals
  o.smartindent = true     -- Insert indents automatically
  o.spelllang = { "en" }
  o.splitbelow = true      -- Put new windows below current
  o.splitright = true      -- Put new windows right of current
  o.tabstop = 2            -- Number of spaces tabs count for
  o.termguicolors = true   -- True color support
  o.timeoutlen = 300
  o.undofile = true
  o.undolevels = 10000
  o.updatetime = 200               -- Save swap file and trigger CursorHold
  o.wildmode = "longest:full,full" -- Command-line completion mode
  o.winminwidth = 5                -- Minimum window width
  o.wrap = false                   -- Disable line wrap

  if vim.fn.has("nvim-0.9.0") == 1 then
    o.splitkeep = "screen"
    o.shortmess:append({ C = true })
  end

  -- use powershell on windows
  if vim.fn.has("win32") == 1 then
    o.shell = vim.fn.executable "pwsh" == 1 and "pwsh" or "powershell"
    o.shellcmdflag =
    "-NoLogo -NoProfile -ExecutionPolicy RemoteSigned -Command [Console]::InputEncoding=[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;"
    o.shellredir = "-RedirectStandardOutput %s -NoNewWindow -Wait"
    o.shellpipe = "2>&1 | Out-File -Encoding UTF8 %s; exit LastExitCode"
    o.shellquote = ""
    o.shellxquote = ""
  end

  -- if in a wsl environment WSL_DISTRO_NAME should be set
  local in_wsl = os.getenv('WSL_DISTRO_NAME') ~= nil

  if in_wsl then
    -- Need to install win32yank in windows
    -- see https://mitchellt.com/2022/05/15/WSL-Neovim-Lua-and-the-Windows-Clipboard.html
    vim.g.clipboard = {
      name = "win32yank-wsl",
      copy = {
        ["+"] = "win32yank.exe -i --crlf",
        ["*"] = "win32yank.exe -i --crlf",
      },
      paste = {
        ["+"] = "win32yank.exe -o --lf",
        ["*"] = "win32yank.exe -o --lf",
      },
      cache_enabled = true,
    }
  end
  @end

* SYNTAX HIGHLIGHTS & COLOR
  Here I set up the color and syntax used in Neovim buffers.
  ___
** Options
  Enable true color support:
  ___
  @code lua
  o.termguicolors = true
  @end
** Gruvebox Colorscheme
   A port of gruvbox community theme to lua with treesitter and semantic highlights support.
   ___
   @code lua
   plug({
    "ellisonleao/gruvbox.nvim",
    enabled = true,
    lazy = false,
    priority = 10000,
    config = function()
      require("gruvbox").setup({
        transparent_mode = true,
        terminal_colors = false, -- disable gruvbox in terminal
        overrides = {
          Folded = { bg = "#202020" },
          -- fix markdown todo colors
          ["@lsp.type.class.markdown"] = { fg = "#000000" },
          ["@neorg.tags.ranged_verbatim.code_block"] = { bg = "#222222" },
        }
      })
      o.background = "dark"
      g.gruvbox_italic = true
      g.gruvbox_bold = false
      g.gruvbox_transparent_bg = true
      g.gruvbox_constrast_dark = "hard"
      g.gruvbox_improved_strings = false
      cmd([[colorscheme gruvbox]])
    end,
    })
   @end
** Indent Blankline
   This plugin adds indentation guides to all lines.
   ___
   @code lua
   plug({
     "lukas-reineke/indent-blankline.nvim",
     enabled = true,
     event = { "BufReadPost", "BufNewFile" },
     main = "ibl",
     opts = {
       exclude = {
         filetypes = {
           "help",
           "alpha",
           "dashboard",
           "fugitive",
           "neo-tree",
           "Trouble",
           "lazy",
           "mason",
           "notify",
           "toggleterm",
           "lazyterm",
           "lspinfo",
           "packer",
           "checkhealth",
           "help",
           "man",
           "gitcommit",
           "TelescopePrompt",
           "TelescopeResults",
         },
       },
     },
   })
   @end
** Colorizer
   Color highlighter, shows color of color codes
   ___
   @code lua
   plug({
     "norcalli/nvim-colorizer.lua",
     enabled = true,
     event = { "BufReadPost", "BufNewFile" },
     opts = {
       default_options = {
         RGB = true,
         RRGGBB = true,
         names = true,
         RRGGBBAA = true,
         rgb_fn = true,
         hsl_fn = true,
         css = true,
         css_fn = true,
         mode = "background",
       },
       "*", -- highlight all files
     },
   })
   @end
** Rainbow
   Use different colors for matching brackets.
   ___
   @code lua
   plug({
     "p00f/nvim-ts-rainbow",
     event = { "BufReadPost", "BufNewFile" },
     main = 'nvim-treesitter.configs',
     opts = {
       -- for nvim-ts-rainbow plugin
       rainbow = {
         enable = true,
         extended_mode = true,   -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
         max_file_lines = 10000, -- Do not enable for files with more than 10000 lines, int
         -- colors = {}, -- table of hex strings
         -- termcolors = {} -- table of colour name strings
       },
     }
   })
   @end
** Sentiment
   To highlight the outer pair of brackets/parenthesis.
   ___
   @code lua
   plug({
     "utilyre/sentiment.nvim",
     version = "*",
     event = "VeryLazy", -- keep for lazy loading
     opts = {
       -- config
     },
     init = function()
       -- `matchparen.vim` needs to be disabled manually in case of lazy loading
       vim.g.loaded_matchparen = 1
     end,
   })
   @end
* UI
  Here we configure the user interface for Neovim.
  ___
** Lualine
   A blazing fast and easy to configure Neovim statusline written in Lua.
   ___
   [GitHub]{https://github.com/nvim-lualine/lualine.nvim}
   @code lua
   local colors = {
    black = "#000000",
    white = "#ffffff",
    gray = "#444444",
    light_gray = "#666666",
    background = "#0c0c0c",
    green = "#005000",
    yellow = "#706000",
    blue = "#004090",
    paste = "#5518ab",
    red = "#800000",
   }
   
   local lualine_theme = {
    normal = {
      a = { fg = colors.white, bg = colors.green },
      b = { fg = colors.white, bg = colors.grey },
      c = { fg = colors.white, bg = colors.black },
    },
   
    insert = { a = { fg = colors.white, bg = colors.blue } },
    command = { a = { fg = colors.white, bg = colors.red } },
    visual = { a = { fg = colors.white, bg = colors.yellow } },
    replace = { a = { fg = colors.white, bg = colors.red } },
   
    inactive = {
      a = { fg = colors.white, bg = colors.black },
      b = { fg = colors.white, bg = colors.black },
      c = { fg = colors.light_gray, bg = colors.black },
    },
   }
   
   plug({
    {
      "nvim-lualine/lualine.nvim",
      event = "VeryLazy",
      opts = function()
        return {
          options = {
            theme = lualine_theme,
            component_separators = { left = "", right = "" },
            section_separators = { left = "|", right = "|" },
          },
          sections = {
            lualine_a = { "mode" },
            lualine_b = { "branch", "diff", "diagnostics" },
            lualine_c = {
              {
                "filename",
                path = 4
              },
            },
            lualine_x = { "encoding", "fileformat", "filetype" },
            lualine_y = { "progress" },
            lualine_z = { "location" },
          },
          inactive_sections = {
            lualine_a = {},
            lualine_b = {},
            lualine_c = {
              {
                "filename",
                path = 4
              },
            },
            lualine_x = { "location" },
            lualine_y = {},
            lualine_z = {},
          },
          tabline = {},
          winbar = {
            lualine_c = {
              {
                "filename",
                path = 4,
              },
              "navic"
            },
          },
          inactive_winbar = {
            lualine_c = {
                {
                  "filename",
                  path = 3
                }
              },
          },
          extensions = {},
        }
      end,
    },
   })
   @end
** Dressing
   Neovim plugin to improve the default vim.ui interfaces.
   ___
   [GitHub]{https://github.com/stevearc/dressing.nvim}
   @code lua
   plug({
     'stevearc/dressing.nvim',
     opts = {},
   })
   @end
** Notify
   A fancy, configurable notification manager for NeoVim.
   ___
   [GitHub]{https://github.com/rcarriga/nvim-notify}
   @code lua
   plug({
     "rcarriga/nvim-notify",
     enabled = true,
     lazy = false,
     config = function ()
       local notify = require("notify")
       notify.setup({
         minimum_width = 20,
         max_width = 50,
         max_height = 50,
         render = "compact",
         timeout = 1000,
         top_down = true
       })
       vim.notify = notify
       pcall(require('telescope').load_extension, "notify")
     end,
     keys = {
       {
         "<leader>;n",
         function () require("telescope").extensions.notify.notify() end,
         desc = "Notificiation History"
       },
     }
   })
   @end
* NEORG
  An all-encompassing tool based around structured note taking, project and task management, time tracking, slideshows, writing typeset documents and much more.
  ___
  [GitHub]{https://github.com/nvim-neorg/neorg}
  [Spec]{https://github.com/nvim-neorg/norg-specs/blob/main/1.0-specification.norg}
  @code lua
  plug({
    "nvim-neorg/neorg",
    build = ":Neorg sync-parsers",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "Pocco81/true-zen.nvim",
      "nvim-neorg/neorg-telescope",
      "nvim-treesitter/nvim-treesitter",
      "nvim-treesitter/nvim-treesitter-textobjects",
      "hrsh7th/nvim-cmp",
    },
    opts = {
      load = {
        ["core.defaults"] = {}, -- Loads default behaviour
        ["core.concealer"] = {  -- Adds pretty icons to your documents
          config = {
            foldlevelstart = "0",
            icon_preset = "diamond",
            icons = {
              code_block = {
                width = "content",
                min_width = 85,
                conceal = true,
                padding = {
                  left = 1,
                  right = 1,
                }
              },
            },
          },
        },
        ["core.dirman"] = { -- Manages Neorg workspaces
          config = {
            workspaces = {
              documents = "~/Documents",
              notes = "~/Documents/Notes",
              career = "~/Documents/Career",
              profiles = "~/Documents/Profiles",
            },
            default_workspace = "documents",
          },
        },
        ["core.completion"] = {
          config = {
            engine = 'nvim-cmp',
            name = "[Norg]",
          }
        },
        ["core.integrations.nvim-cmp"] = {},
        ["core.qol.toc"] = {
          config = {
            close_split_on_jump = true,
            toc_split_placement = "right",
          }
        },
        ["core.export"] = {},
        ["core.export.markdown"] = {
          config = {
            extensions = "all",
          }
        },
        ["core.integrations.telescope"] = {},
        ["core.presenter"] = {
          config = {
            zen_mode = "truezen",
          }
        },
        ["core.journal"] = {
          config = {
            workspace = "journal",
            strategy = "flat",
          }
        },
        ["core.summary"] = {},
        ["core.esupports.metagen"] = { config = { type = "auto", update_date = true } },
      }
    },
    config = function()
      -- require("neorg").setup(neorg_opts)

      local neorg_callbacks = require("neorg.core.callbacks")

      neorg_callbacks.on_event("core.keybinds.events.enable_keybinds", function(_, keybinds)
        -- Map all the below keybinds only when the "norg" mode is active
        keybinds.map_event_to_mode("norg", {
          n = { -- Bind keys in normal mode
            { "<localleader>ff", "core.integrations.telescope.find_norg_files",  opts = { desc = 'Find Norg Files' } },
            { "<localleader>fl", "core.integrations.telescope.find_linkable",    opts = { desc = 'Find Linkable' } },
            { "<localleader>sh", "core.integrations.telescope.search_headings",  opts = { desc = 'Search Headings' } },
            { "<localleader>sw", "core.integrations.telescope.switch_workspace", opts = { desc = 'Switch Workspace' } },
            { "<localleader>cg", "core.looking-glass.magnify-code-block", opts = { desc = 'Looking Glass' } },
          },

          i = { -- Bind in insert mode
            { "<C-l>",  "core.integrations.telescope.insert_link",      opts = { desc = 'Insert Link' } },
            { "<C-L>", "core.integrations.telescope.insert_file_link", opts = { desc = 'Insert Neorg File Link' } },
          },
        }, {
          silent = true,
          noremap = true,
        })
      end)
    end,
  })
  @end
* TELESCOPE
** Telescope
   A highly extendable fuzzy finder over lists, files, buffers, git status and more.
   ___
   [GitHub]{https://github.com/nvim-telescope/telescope.nvim}
   @code lua
   plug({
    "nvim-telescope/telescope.nvim",
    enabled = true,
    lazy = false,
    dependencies = {
      'nvim-lua/plenary.nvim',
      -- Fuzzy Finder Algorithm which requires local dependencies to be built.
      -- Only load if `make` is available. Make sure you have the system
      -- requirements installed.
      {
        'nvim-telescope/telescope-fzf-native.nvim',
        -- NOTE: If you are having trouble with this installation,
        --       refer to the README for telescope-fzf-native for more instructions.
        build = 'make',
        cond = function()
          return vim.fn.executable 'make' == 1
        end,
      },
    },
    config = function()
      require('telescope').setup{
        defaults = {
          mappings = {
            n = {
              ['<c-d>'] = require('telescope.actions').delete_buffer
            }, -- n
            i = {
              ["<C-h>"] = "which_key",
              ['<c-d>'] = require('telescope.actions').delete_buffer
            } -- i
          } -- mappings
        }, -- defaults
      }
   
      -- Enable telescope fzf native, if installed
      pcall(require('telescope').load_extension, 'fzf')
   
      local ts = require('telescope.builtin')
   
      local fuzzy_search = function()
        -- You can pass additional configuration to telescope to change theme, layout, etc.
        ts.current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
          winblend = 10,
          previewer = false,
        })
      end
   
      -- Shortcuts
      vim.keymap.set('n', '<leader>?', ts.oldfiles, { desc = 'Find Recently Files' })
      vim.keymap.set('n', '<leader>,', ts.buffers, { desc = 'Find buffers' })
      vim.keymap.set('n', '<leader>/', fuzzy_search , { desc = 'Fuzzy Search in buffer' })
   
      -- Find Files
      vim.keymap.set('n', '<leader>ff', ts.find_files, { desc = 'Find Files' })
      vim.keymap.set('n', '<leader>fb', ts.buffers, { desc = 'Find Buffers' })
      vim.keymap.set('n', '<leader>fr', ts.oldfiles, { desc = 'Find Recent Files' })
      vim.keymap.set('n', '<leader>fg', ts.git_files, { desc = 'Find Git Files' })
      vim.keymap.set('n', '<leader>fs', ts.git_status, { desc = 'Find Git Status' })
      vim.keymap.set('n', '<leader>fS', ts.git_stash, { desc = 'Find Git Stash' })
   
      vim.keymap.set('n', '<leader>fd', function() ts.find_files({ cwd = '~/Documents' }) end,
        { desc = 'Find Documents' })
      vim.keymap.set('n', '<leader>fD', function() ts.find_files({ cwd = '~/Downloads' }) end,
        { desc = 'Find Downloads' })
      vim.keymap.set('n', '<leader>fp', function() ts.find_files({ cwd = '~/Projects' }) end, { desc = 'Find Projects' })
      vim.keymap.set('n', '<leader>fc', function() ts.find_files({ cwd = vim.fn.stdpath('config') }) end,
        { desc = 'Find Config' })
      vim.keymap.set('n', '<leader>fB', function() ts.find_files({ cwd = '~/.local/bin' }) end,
        { desc = 'Find Local Bin' })
   
      -- Search for content, help and functions
      vim.keymap.set('n', '<leader>sc', ts.git_commits, { desc = 'Search Git Commits' })
      vim.keymap.set('n', '<leader>st', ts.builtin, { desc = 'Search Telescope' })
      vim.keymap.set('n', '<leader>sh', ts.help_tags, { desc = 'Search Help' })
      vim.keymap.set('n', '<leader>sw', ts.grep_string, { desc = 'Search Current Word' })
      vim.keymap.set('n', '<leader>sg', ts.live_grep, { desc = 'Search by Grep' })
      vim.keymap.set('n', '<leader>sd', ts.diagnostics, { desc = 'Search Diagnostics' })
      vim.keymap.set('n', '<leader>sk', ts.keymaps, { desc = 'Search Keymaps' })
      vim.keymap.set('n', "<leader>s'", ts.marks, { desc = 'Search Marks' })
      vim.keymap.set('n', '<leader>s"', ts.registers, { desc = 'Search Registers' })
      vim.keymap.set('n', '<leader>sf', fuzzy_search , { desc = 'Fuzzy Search in buffer' })
   
    end,
   })
   @end

** Telescope Sessions Picker
   Load nvim session files from target directory.
   ___
   [GitHub]{https://github.com/JoseConseco/telescope_sessions_picker.nvim}
   @code lua
   plug({
    "JoseConseco/telescope_sessions_picker.nvim",
    enabled = true,
    lazy = true,
    config = function()
      require('telescope').load_extension('sessions_picker')
    end,
    keys = {
      { "<leader>sS",
        function() require('telescope').extensions.sessions_picker.sessions_picker() end,
        desc = "Search Neovim Sessions"
      },
    }
   })
   @end

** Telescope Tmux
   A Telescope.nvim extension for fuzzy-finding over tmux targets.
   ___
   [GitHub]{https://github.com/camgraff/telescope-tmux.nvim}
   @code lua
   plug({ -- https://github.com/camgraff/telescope-tmux.nvim
    "camgraff/telescope-tmux.nvim",
    enabled = true,
    lazy = true,
    config = function ()
      require('telescope').load_extension('tmux')
    end,
    keys = {
      { "<leader>ss",
        function() require('telescope').extensions.tmux.sessions({}) end,
        desc = "Search Tmux Sessions"
      },
    }
   })
   @end

** Telescope Tabs
   A Telescope.nvim extension for fuzzy-finding over vim tabs.
   ___
   [GitHub]{https://github.com/LukasPietzschmann/telescope-tabs}
   @code lua
   plug({
    'LukasPietzschmann/telescope-tabs',
    dependencies = { 'nvim-telescope/telescope.nvim' },
    enabled = true,
    lazy = true,
    config = function()
      require('telescope').load_extension 'telescope-tabs'
      require('telescope-tabs').setup {
        show_preview = true,
      }
    end,
    keys = {
      {"<tab>", mode = { "n" }, function() require("telescope-tabs").list_tabs() end, desc = "Open Tabs"}
    }
   })
   @end
* FILE NAVIGATION
** Oil
   A file explorer that lets you edit your filesystem like a normal Neovim buffer.
   ___
   [GitHub]{https://github.com/stevearc/oil.nvim}
   @code lua
   plug({
      "stevearc/oil.nvim",
      dependencies = { "nvim-tree/nvim-web-devicons" },
      enabled = true,
      lazy = true,
      config = function ()
        require("oil").setup({
          default_file_explorer = true,
        })
   
      end,
      cmd = "Oil",
      keys = {
        { "<leader>o", function() require("oil").toggle_float() end, desc = "Oil File Manager" },
        { "<leader>O", function() require("oil").toggle_float(vim.fn.getcwd()) end, desc = "Oil File Manager" },
      }
   })
   @end
** Neo-Tree
   To browse the file system and other tree like structures
   ___
   [GitHub]{https://github.com/nvim-neo-tree/neo-tree.nvim}
   @code lua
   plug({
     "nvim-neo-tree/neo-tree.nvim",
     branch = "v3.x",
     dependencies = {
       "nvim-lua/plenary.nvim",
       "nvim-tree/nvim-web-devicons", -- not strictly required, but recommended
       "MunifTanjim/nui.nvim",
     },
     cmd = "Neotree",
     keys = {
       {
         "<leader>e",
         function()
           require("neo-tree.command").execute({ toggle = true, dir = vim.loop.cwd() })
         end,
         desc = "Explorer NeoTree",
       },
       {
         "<leader>be",
         function()
           require("neo-tree.command").execute({ toggle = true, source = "buffers"  })
         end,
         desc = "Explorer NeoTree Buffers",
       },
     },
     deactivate = function()
       vim.cmd([[Neotree close]])
     end,
     opts = {
       sources = { "filesystem", "buffers", "git_status", "document_symbols" },
       open_files_do_not_replace_types = { "terminal", "Trouble", "qf", "Outline" },
       filesystem = {
         bind_to_cwd = false,
         follow_current_file = { enabled = true },
         use_libuv_file_watcher = true,
       },
       window = {
         mappings = {
           ["<space>"] = "none",
         },
       },
       default_component_configs = {
         indent = {
           with_expanders = true, -- if nil and file nesting is enabled, will enable expanders
           expander_collapsed = "",
           expander_expanded = "",
           expander_highlight = "NeoTreeExpander",
         },
       },
     },
   })
@end
** Harpoon
   A per project file bookmark plugin
   ___
   [GitHub]{https://github.com/ThePrimeagen/harpoon}
   @code lua
   plug({
     'ThePrimeagen/harpoon',
     enabled = true,
     dependencies = { 'nvim-lua/plenary.nvim' },
     opts = {},
     config = function()
       -- enable telescope extension
       local tsh = require("telescope").load_extension('harpoon')
   
       -- set keymaps
       vim.keymap.set('n', "<leader>'a", require('harpoon.mark').add_file, { desc = 'Harpoon Add File' })
       vim.keymap.set('n', "<leader>']", require('harpoon.ui').nav_next, { desc = 'Harpoon Next' })
       vim.keymap.set('n', "<leader>'[", require('harpoon.ui').nav_prev, { desc = 'Harpoon Previous' })
       vim.keymap.set("n", "<leader>fh", tsh.marks, { desc = "Find Harpoon" })
   
       for i = 1, 9 do
         vim.keymap.set('n', "<leader>'" .. i, function() require('harpoon.ui').nav_file(i) end,
           { desc = 'Harpoon Nav File' })
       end
   
       require('which-key').register({
         ['<leader>'] = {
           ["'"] = { name = "+Harpoon" },
         },
       })
     end,
   })
   @end
** Project.nvim
   An all in one neovim plugin written in lua that provides superior project management.
   ___
   [GitHub]{https://github.com/ahmedkhalf/project.nvim}
   @code lua
   plug({
     "ahmedkhalf/project.nvim",
     enabled = true,
     lazy = false,
     config = function()
       require("project_nvim").setup {}

       pcall(require('telescope').load_extension('projects'))
     end,
     keys = {
       {
         "<leader>sp",
         function() require('telescope').load_extension('projects').projects() end,
         desc = 'Search for Project',
       },
     },
   })
   @end
* BUFFER NAVIGATION
** Nvim Spider
   Use the w, e, b motions like a spider. Move by subwords and skip insignificant punctuation.
   ___
   [GitHub]{https://github.com/chrisgrieser/nvim-spider}
   @code lua
   plug({
     "chrisgrieser/nvim-spider",
     enabled = true,
     lazy = false,
     config = function()
       vim.keymap.set({ "n", "o", "x" }, "w", "<cmd>lua require('spider').motion('w')<cr>", { desc = "Spider-w" })
       vim.keymap.set({ "n", "o", "x" }, "e", "<cmd>lua require('spider').motion('e')<cr>", { desc = "Spider-e" })
       vim.keymap.set({ "n", "o", "x" }, "b", "<cmd>lua require('spider').motion('b')<cr>", { desc = "Spider-b" })
       vim.keymap.set({ "n", "o", "x" }, "ge", "<cmd>lua require('spider').motion('ge')<cr>", { desc = "Spider-ge" })
     end,
   })
   @end
** Leap
   A general-purpose motion plugin for Neovim.
   ___
   [GitHub]{https://github.com/ggandor/leap.nvim}
   @code lua
   plug({ -- https://github.com/ggandor/leap.nvim
    "ggandor/leap.nvim",
    enabled = true,
    config = function ()
      local leap = require('leap')
      leap.create_default_mappings()
      leap.opts = {
        highlight_unlabeled_phase_one_targets = true,
        safe_labels = 'jfkdls;agh',
        labels = 'jfkdls;aghvncmir',
      }
    end,
   })
   @end
* GIT
** Fugitive
   A git wrapper plugin.
   ___
   [GitHub]{https://github.com/tpope/vim-fugitive}
  @code lua
  plug({
    'tpope/vim-fugitive',
    enabled = true,
    lazy = true,
    keys = {
      { "<leader>gg",
        "<cmd>Git<cr>",
        desc = "Git"
      },
      { "<leader>gp",
        "<cmd>Git push<cr>",
        desc = "Git Push"
      },
      { "<leader>gP",
        "<cmd>Git pull<cr>",
        desc = "Git Pull"
      },
      { "<leader>gl",
        "<cmd>Git log<cr>",
        desc = "Git Log"
      },
      { "<leader>gd",
        "<cmd>Git diff<cr>",
        desc = "Git Diff"
      },
    }
  })
  @end
** Gitsigns
   Adds git related signs to the gutter, as well as utilities for managing changes
   ___
   [GitHub]{https://github.com/lewis6991/gitsigns.nvim}
  @code lua
  plug({
    'lewis6991/gitsigns.nvim',
    enabled = true,
    opts = {
      -- See `:help gitsigns.txt`
      on_attach = function(bufnr)
        local gs = package.loaded.gitsigns
        vim.keymap.set('n', '[h', gs.prev_hunk, { buffer = bufnr, desc = 'Go to Previous Hunk' })
        vim.keymap.set('n', ']h', gs.next_hunk, { buffer = bufnr, desc = 'Go to Next Hunk' })
        vim.keymap.set('n', '<leader>hs', gs.stage_hunk, { buffer = bufnr, desc = 'Git Stage Hunk' })
        vim.keymap.set('n', '<leader>hS', gs.stage_buffer, { buffer = bufnr, desc = 'Git Stage Entire Buffer' })
        vim.keymap.set('n', '<leader>hr', gs.reset_hunk, { buffer = bufnr, desc = 'Git Reset Hunk' })
        vim.keymap.set('n', '<leader>hR', gs.reset_buffer, { buffer = bufnr, desc = 'Git Reset Entire Buffer' })
        vim.keymap.set('v', '<leader>hs', function() gs.stage_hunk { vim.fn.line('.'), vim.fn.line('v') } end,
          { buffer = bufnr, desc = 'Git Stage Selected Hunk' })
  
        vim.keymap.set('v', '<leader>gr', function() gs.reset_hunk { vim.fn.line('.'), vim.fn.line('v') } end,
          { buffer = bufnr, desc = 'Git Reset Selected Hunk' })
  
        vim.keymap.set('n', '<leader>hu', gs.undo_stage_hunk, { buffer = bufnr, desc = 'Git Undo Stage Hunk' })
        vim.keymap.set('n', '<leader>ht', gs.toggle_deleted, { buffer = bufnr, desc = 'Git Toggle Deleted' })
        vim.keymap.set('n', '<leader>hd', gs.diffthis, { buffer = bufnr, desc = 'Git Diff Hunk' })
        vim.keymap.set('n', '<leader>hD', function() gs.diffthis('~') end, { buffer = bufnr, desc = 'Git Diff Hunk' })
        vim.keymap.set('n', '<leader>hp', gs.preview_hunk, { buffer = bufnr, desc = 'Git Preview Hunk' })
        vim.keymap.set('n', '<leader>hb', gs.blame_line, { buffer = bufnr, desc = 'Git Blame Line' })
        vim.keymap.set('n', '<leader>hB', gs.toggle_current_line_blame,
          { buffer = bufnr, desc = 'Git Blame Line Toggle' })
  
        -- Text object
        vim.keymap.set({ 'o', 'x' }, 'ih', ':<C-U>Gitsigns select_hunk<CR>', { desc = 'Hunk' })
        vim.keymap.set({ 'o', 'x' }, 'ah', ':<C-U>Gitsigns select_hunk<CR>', { desc = 'Hunk' })
      end,
    },
  })
   @end
** Diffview
   Single tabpage interface for easily cycling through diffs for all modified files for any git rev.
   ___
   [GitHub]{https://github.com/sindrets/diffview.nvim}
   @code lua
   plug({
     "sindrets/diffview.nvim",
     enabled = true,
     lazy = true,
     keys = {
       {
         "<leader>dd",
         "<cmd>DiffviewOpen<cr>",
         desc = "Open Diff View",
       }
     },
   })
  @end
* LSP
  Language Server Protocol
  ___
  The Language Server Protocol (LSP) defines the protocol used between an editor or IDE and a language server that provides language features like auto complete, go to definition, find all references etc. The goal of the Language Server Index Format (LSIF, pronounced like "else if") is to support rich code navigation in development tools or a Web UI without needing a local copy of the source code.
  ___
  [Official LSP Home]{https://microsoft.github.io/language-server-protocol/}
  @code lua
  plug({
  -- Collection of functions that will help you setup Neovim's LSP client
  'VonHeikemen/lsp-zero.nvim',
  branch = 'v3.x',
  dependencies = {
    -- LSP Support
    { 'neovim/nvim-lspconfig' },             -- Required
    { 'williamboman/mason.nvim' },           -- Optional
    { 'williamboman/mason-lspconfig.nvim' }, -- Optional
  
    -- Format
    { 'onsails/lspkind.nvim' }, -- shows icons on completion menu
    { 'kosayoda/nvim-lightbulb' },
    {
      'weilbith/nvim-code-action-menu',
      cmd = 'CodeActionMenu',
    },
  
    -- Autocompletion
    { 'hrsh7th/nvim-cmp' },
    { 'hrsh7th/cmp-nvim-lsp' },
    {
      'L3MON4D3/LuaSnip',
      dependencies = { "rafamadriz/friendly-snippets" },
    },
    { 'nvimtools/none-ls.nvim',     dependencies = { 'nvim-lua/plenary.nvim' } },
    { "jay-babu/mason-null-ls.nvim" },
  
    { 'saadparwaiz1/cmp_luasnip' },
    { 'hrsh7th/cmp-nvim-lua' },
    { 'hrsh7th/cmp-buffer' },
    { 'hrsh7th/cmp-cmdline' },
    { 'hrsh7th/cmp-path' },
    { 'hrsh7th/cmp-emoji' },
    { 'hrsh7th/cmp-calc' },
  },
  config = function()
    local lsp_zero = require('lsp-zero')
  
    lsp_zero.on_attach(function(client, bufnr)
      -- see :help lsp-zero-keybindings
      -- to learn the available actions
      lsp_zero.default_keymaps({ buffer = bufnr })
  
      local opts = function(desc)
        return { buffer = bufnr, remap = false, desc = desc }
      end
  
      local ts = require('telescope.builtin')
  
      vim.keymap.set({ 'n', 'x' }, '<leader>lf', function()
        vim.lsp.buf.format({ async = false, timeout_ms = 10000 })
      end, opts('Lsp format buffer'))
  
      vim.keymap.set("n", "[d", function() vim.diagnostic.goto_next() end, opts("Go To Next Diagnostic"))
      vim.keymap.set("n", "]d", function() vim.diagnostic.goto_prev() end, opts("Go To Previous Diagnostic"))
      -- vim.keymap.set("n", "gd", function() vim.lsp.buf.definition() end, opts("Go To Definition"))
      vim.keymap.set("n", "gd", ts.lsp_definitions, opts("Go To Definition"))
      vim.keymap.set("n", "<leader>la", function() vim.lsp.buf.code_action() end, opts("Code Action"))
      vim.keymap.set("n", "<leader>lh", function() vim.lsp.buf.hover() end, opts("Hover"))
      vim.keymap.set("n", "<leader>lH", function() vim.lsp.buf.signature_help() end, opts("Signiture Help"))
      -- vim.keymap.set("n", "<leader>ls", function() vim.lsp.buf.workspace_symbol() end, opts("Workspace Symbol"))
      vim.keymap.set("n", "<leader>ls", ts.lsp_workspace_symbols, opts("Workspace Symbol"))
      -- vim.keymap.set("n", "<leader>vd", function() vim.diagnostic.open_float() end, opts("Open Float"))
      -- vim.keymap.set("n", "<leader>lr", function() vim.lsp.buf.references() end, opts("References"))
      vim.keymap.set("n", "<leader>lr", ts.lsp_references, opts("References"))
      vim.keymap.set("n", "<leader>li", function() vim.lsp.buf.implementation() end, opts("Implementation"))
      vim.keymap.set("n", "<leader>lR", function() vim.lsp.buf.rename() end, opts("Rename"))
      vim.keymap.set("n", "<leader>lI", '<cmd>LspInfo<CR>', opts("LspInfo"))
    end)
  
    require('mason').setup({})
    require('mason-lspconfig').setup({
      ensure_installed = {
        'lua_ls',
        'bashls',
        'pyright',    -- python
        'html',
        'clangd',
        "marksman",   -- markdown
      },
      handlers = {
        lsp_zero.default_setup,
        lua_ls = function()
          local lua_opts = lsp_zero.nvim_lua_ls()
          require('lspconfig').lua_ls.setup(lua_opts)
        end,
        marksman = function()
          require('lspconfig').marksman.setup({})
        end,
      }
    })
  
    -- Open Mason UI
    vim.keymap.set("n", "<leader>;m", "<cmd>Mason<cr>", { desc = "Mason Plugin Manager" })
  
    local null_ls = require("null-ls")
  
    local o = vim.o
    null_ls.setup({
      sources = {
        null_ls.builtins.formatting.stylua.with({ extra_args = { '--indent_type=spaces', '--indent_width=' .. o.tabstop } }),
        null_ls.builtins.diagnostics.eslint,
        null_ls.builtins.diagnostics.trail_space,
  
        null_ls.builtins.formatting.black, -- python formatting
  
        null_ls.builtins.completion.spell,
        null_ls.builtins.diagnostics.codespell,
        null_ls.builtins.diagnostics.write_good,
  
        null_ls.builtins.formatting.prettierd,
        null_ls.builtins.diagnostics.markdownlint, -- markdown
      },
    })
  
    require("mason-null-ls").setup({
      ensure_installed = {
        "stylua",
        "ruff",  -- python linter
        "mypy",  -- python type checker
        "black", -- python formatter
        "eslint",
        "trail_space",
        "spell",
        "codespell",
        "write_good",
        "prettierd",
        "markdownlint", -- markdown linter
      }
    })
  
    local cmp = require('cmp')
    local cmp_action = require('lsp-zero').cmp_action()
  
    -- load snippets
    require('luasnip.loaders.from_lua').lazy_load({ paths = './snippets/' })
    require('luasnip.loaders.from_vscode').lazy_load()
  
  
    local types = require("luasnip.util.types")
  
    require('luasnip').config.set_config({
      -- This one is cool cause if you have dynamic snippets, it updates as you type!
      updateevents = "TextChanged,TextChangedI",
  
      enable_autosnippets = true,
  
      ext_opts = {
        [types.choiceNode] = {
          active = {
            virt_text = { { " ⬅️c ", "NonTest" } },
          },
        },
        [types.insertNode] = {
          active = {
            virt_text = { { " ⬅️t", "NonTest" } },
          },
        },
      },
    })
  
    -- snippet keymap
    vim.keymap.set("i", "<c-o>", require "luasnip.extras.select_choice")
    vim.keymap.set("n", "<leader>csc", require "luasnip.extras.select_choice")
    vim.keymap.set("i", "<c-d>", "<Plug>luasnip-next-choice")
    vim.keymap.set("s", "<c-d>", "<Plug>luasnip-next-choice")
    vim.keymap.set("i", "<c-u>", "<Plug>luasnip-prev-choice")
    vim.keymap.set("s", "<c-u>", "<Plug>luasnip-prev-choice")
  
    cmp.setup({
      sources = {
        { name = 'nvim_lsp' }, -- completion for neovim
        { name = 'nvim_lua' }, -- completion for neovim lua api
        { name = 'luasnip' },  -- show snippets
        { name = 'buffer' },   -- show elements from your buffer
        { name = 'path' },     -- show file paths
        { name = 'calc' },     -- completion for math calculation
        { name = 'emoji' },    -- show emoji's
      },
      snippet = {
        expand = function(args)
          require('luasnip').lsp_expand(args.body)
        end,
      },
      mapping = cmp.mapping.preset.insert({
        ['<CR>'] = cmp.mapping.confirm({ select = false }),
        -- scroll up and down the documentation window
        ['<C-u>'] = cmp.mapping.scroll_docs(-4),
        ['<C-d>'] = cmp.mapping.scroll_docs(4),
  
        ['<C-l>'] = cmp_action.luasnip_jump_forward(),
        ['<C-h>'] = cmp_action.luasnip_jump_backward(),
      }),
      formatting = {
        fields = { 'abbr', 'kind', 'menu' },
        format = require('lspkind').cmp_format({
          mode = 'symbol_text',  -- show only symbol annotations
          maxwidth = 50,         -- prevent the popup from showing more than provided characters
          ellipsis_char = '...', -- when popup menu exceed maxwidth, the truncated part would show ellipsis_char instead
        })
      }
    })
  
    -- `/` cmdline setup.
    cmp.setup.cmdline('/', {
      mapping = cmp.mapping.preset.cmdline(),
      sources = {
        { name = 'buffer' }
      }
    })
  
    -- `:` cmdline setup.
    cmp.setup.cmdline(':', {
      mapping = cmp.mapping.preset.cmdline(),
      sources = cmp.config.sources({
        { name = 'path' }
      }, {
        { name = 'cmdline' }
      })
    })
  
    require("nvim-lightbulb").setup({
      autocmd = { enabled = true },
      virtual_text = {
        enabled = true,
        text = '󰌵'
      },
    })
  end,
  })
  @end
* DEBUG
  A Debug Adapter Protocol client implementation for Neovim
  ___
  [GitHub]{https://github.com/mfussenegger/nvim-dap}
  @code lua
  plug({
  'mfussenegger/nvim-dap',
  dependencies = {
    -- Creates a beautiful debugger UI
    'rcarriga/nvim-dap-ui',
  
    -- add virtual text
    'theHamsta/nvim-dap-virtual-text',
  
    -- Installs the debug adapters for you
    'williamboman/mason.nvim',
    'jay-babu/mason-nvim-dap.nvim',
  
    -- Add your own debuggers here
    { 'leoluz/nvim-dap-go',           ft = { 'go' } },
    { 'mfussenegger/nvim-dap-python', ft = { 'python' } },
  },
  config = function()
    local dap = require("dap")
    local dapui = require("dapui")
    local mason_registry = require("mason-registry")
  
    require("mason-nvim-dap").setup {
      -- Makes a best effort to setup the various debuggers with
      -- reasonable debug configurations
      automatic_setup = true,
  
      -- You can provide additional configuration to the handlers,
      -- see mason-nvim-dap README for more information
      handlers = {},
  
      -- You'll need to check that you have the required things installed
      -- online, please don't ask me how to install them :)
      ensure_installed = {
        -- Update this to ensure that you have the debuggers for the langs you want
        'delve',
        'debugpy',
      },
    }
  
    -- Basic debugging keymaps, feel free to change to your liking!
    vim.keymap.set('n', '<F5>', dap.continue, { desc = 'Debug: Start/Continue' })
    vim.keymap.set('n', '<F1>', dap.step_into, { desc = 'Debug: Step Into' })
    vim.keymap.set('n', '<F2>', dap.step_over, { desc = 'Debug: Step Over' })
    vim.keymap.set('n', '<F3>', dap.step_out, { desc = 'Debug: Step Out' })
    vim.keymap.set('n', '<F4>', dap.step_back, { desc = 'Debug: Step Back' })
    vim.keymap.set('n', '<leader>db', dap.toggle_breakpoint, { desc = 'Debug: Toggle Breakpoint' })
    vim.keymap.set('n', '<leader>dB', dap.set_breakpoint, { desc = 'Debug: Set Breakpoint' })
    vim.keymap.set('n', '<leader>dl', dap.run_last, { desc = 'Debug: Run Last' })
    vim.keymap.set('n', '<leader>dc', function()
      dap.set_breakpoint(vim.fn.input 'Breakpoint condition: ')
    end, { desc = 'Debug: Set Breakpoint Condition' })
  
    -- Add virtual text showing contained values
    require("nvim-dap-virtual-text").setup({
      highlight_new_as_changed = true, -- highlight new variables in the same way as changed variables (if highlight_changed_variables)
      only_first_definition = false,   -- only show virtual text at first definition (if there are multiple)
    })
  
    -- Dap UI setup
    -- For more information, see |:help nvim-dap-ui|
    dapui.setup {
      -- Set icons to characters that are more likely to work in every terminal.
      --    Feel free to remove or use ones that you like more! :)
      --    Don't feel like these are good choices.
      icons = { expanded = '▾', collapsed = '▸', current_frame = '*' },
      controls = {
        icons = {
          pause = '⏸',
          play = '▶',
          step_into = '⏎',
          step_over = '⏭',
          step_out = '⏮',
          step_back = 'b',
          run_last = '▶▶',
          terminate = '⏹',
          disconnect = '⏏',
        },
      },
    }
  
    -- Toggle to see last session result. Without this, you can't see session output in case of unhandled exception.
    vim.keymap.set('n', '<F7>', dapui.toggle, { desc = 'Debug: See last session result.' })
  
    dap.listeners.after.event_initialized['dapui_config'] = dapui.open
    dap.listeners.before.event_terminated['dapui_config'] = dapui.close
    dap.listeners.before.event_exited['dapui_config'] = dapui.close
  
    -- Setup golang dap
    require('dap-go').setup()
  
    -- Setup python dap
    local debug_py_path = mason_registry.get_package("debugpy"):get_install_path() .. "/venv/bin/python"
    require('dap-python').setup(debug_py_path)
  end,
  })
  @end
* TEXT MANIPULATION
** Comment.nvim
   Smart and Powerful commenting plugin for neovim
   ___
   [GitHub]{https://github.com/numToStr/Comment.nvim}
   @code lua
   plug({ 'numToStr/Comment.nvim', opts = {} })
   @end
** Dial.nvim
   Extended increment/decrement plugin
   ___
   [GitHub]{https://github.com/monaqa/dial.nvim}
   @code lua
   plug({
    'monaqa/dial.nvim',
    config = function()
      local augend = require("dial.augend")
      require("dial.config").augends:register_group {
        -- default augends used when no group name is specified
        default = {
          augend.integer.alias.decimal,  -- nonnegative decimal number (0, 1, 2, 3, ...)
          augend.constant.alias.bool,    -- boolean value (true <-> false)
          augend.integer.alias.hex,      -- nonnegative hex number  (0x01, 0x1a1f, etc.)
          augend.date.alias["%Y/%m/%d"], -- date (2022/02/19, etc.)
          augend.date.alias["%Y-%m-%d"],
          augend.date.alias["%m/%d"],
          augend.date.alias["%H:%M"],
          augend.constant.new {
            elements = { "and", "or" },
            word = true,   -- if false, "sand" is incremented into "sor", "doctor" into "doctand", etc.
            cyclic = true, -- "or" is incremented into "and".
            preserve_case = true,
          },
          augend.constant.new {
            elements = { "yes", "no" },
            word = true,   -- if false, "sand" is incremented into "sor", "doctor" into "doctand", etc.
            cyclic = true, -- "or" is incremented into "and".
            preserve_case = true,
          },
          augend.constant.new {
            elements = { "&&", "||" },
            word = false,
            cyclic = true,
          },
        },
      }
   
      vim.keymap.set("n", "<C-a>", require("dial.map").inc_normal(), { noremap = true })
      vim.keymap.set("n", "<C-x>", require("dial.map").dec_normal(), { noremap = true })
      vim.keymap.set("n", "g<C-a>", require("dial.map").inc_gnormal(), { noremap = true })
      vim.keymap.set("n", "g<C-x>", require("dial.map").dec_gnormal(), { noremap = true })
      vim.keymap.set("v", "<C-a>", require("dial.map").inc_visual(), { noremap = true })
      vim.keymap.set("v", "<C-x>", require("dial.map").dec_visual(), { noremap = true })
      vim.keymap.set("v", "g<C-a>", require("dial.map").inc_gvisual(), { noremap = true })
      vim.keymap.set("v", "g<C-x>", require("dial.map").dec_gvisual(), { noremap = true })
    end,
   })
   @end
** Nvim-Surround
   Add, delete, change and select surrounding pairs
   ___
   [GitHub]{https://github.com/kylechui/nvim-surround}
   @code lua
   plug({
    "kylechui/nvim-surround",
    version = "*", -- Use for stability; omit to use `main` branch for the latest features
    event = "VeryLazy",
    config = function()
      require("nvim-surround").setup({
        -- Configuration here, or leave empty to use defaults
      })
    end,
   })
   @end
** Nvim-various-textobjs
   Bundle of more than two dozen new textobjects for Neovim.
   ___
   [GitHub]{https://github.com/chrisgrieser/nvim-various-textobjs}
   @code lua
   plug({
     "chrisgrieser/nvim-various-textobjs",
     lazy = false,
     opts = {
       useDefaultKeymaps = true,
       disabledKeymaps = { "gc" },
     },
   })
   @end
** Treesj
   A plugin for splitting/joining blocks of code like arrays, hashes, statements, objects, dictionaries and more.
   ___
   [GitHub]{https://github.com/Wansmer/treesj}
   @code lua
   plug({
     "Wansmer/treesj",
     dependencies = "nvim-treesitter/nvim-treesitter",
     keys = {
       { "<leader>j", function() require("treesj").toggle() end, desc = "󰗈 Split-join lines" },
     },
   })
   @end
** Text case
   Case conversion, upper to lower to camel to snake and more.
   ___
   [GitHub]{https://github.com/johmsalas/text-case.nvim}
   @code lua
   plug({
     "johmsalas/text-case.nvim",
     init = function()
       local casings = {
         { char = "u", arg = "upper",      desc = "UPPER CASE" },
         { char = "l", arg = "lower",      desc = "lower case" },
         { char = "t", arg = "title",      desc = "Title Case" },
         { char = "c", arg = "camel",      desc = "camelCase" },
         { char = "C", arg = "pascal",     desc = "CamelCase" },
         { char = "s", arg = "snake",      desc = "snake_case" },
         { char = "_", arg = "snake",      desc = "snake_case" },
         { char = "d", arg = "dash",       desc = "dash-case" },
         { char = "D", arg = "title_dash", desc = "Title-Dash-Case" },
         { char = "-", arg = "dash",       desc = "dash-case" },
         { char = "p", arg = "phrase",     desc = "Phrase case" },
         { char = "/", arg = "path",       desc = "path/case" },
         { char = "S", arg = "constant",   desc = "UPPER_SNAKE_CASE" },
         { char = ".", arg = "dot",        desc = "dot.case" },
       }
   
       for _, case in pairs(casings) do
         vim.keymap.set(
           "n",
           "<leader>c" .. case.char,
           ("<cmd>lua require('textcase').current_word('to_%s_case')<CR>"):format(case.arg),
           { desc = case.desc }
         )
         vim.keymap.set(
           "v",
           "<leader>c" .. case.char,
           ("<cmd>lua require('textcase').operator('to_%s_case')<CR>"):format(case.arg),
           { desc = case.desc }
         )
         vim.keymap.set(
           "n",
           "<leader>C" .. case.char,
           ("<cmd>lua require('textcase').lsp_rename('to_%s_case')<CR>"):format(case.arg),
           { desc = "󰒕 " .. case.desc }
         )
       end
     end,
   })
   @end
** Autolist
   Automatic list continuation and formatting.
   ___
   [GitHub]{https://github.com/gaoDean/autolist.nvim}
   @code lua
   plug({
     "gaoDean/autolist.nvim",
     ft = {
       "markdown",
       "text",
       "tex",
       "plaintex",
       "norg",
     },
     config = function()
       require("autolist").setup()
   
       -- vim.keymap.set("i", "<tab>", "<cmd>AutolistTab<cr>")
       -- vim.keymap.set("i", "<s-tab>", "<cmd>AutolistShiftTab<cr>")
       -- vim.keymap.set("i", "<c-t>", "<c-t><cmd>AutolistRecalculate<cr>") -- an example of using <c-t> to indent
       vim.keymap.set("i", "<CR>", "<CR><cmd>AutolistNewBullet<cr>")
       vim.keymap.set("n", "o", "o<cmd>AutolistNewBullet<cr>")
       vim.keymap.set("n", "O", "O<cmd>AutolistNewBulletBefore<cr>")
       vim.keymap.set("n", "<CR>", "<cmd>AutolistToggleCheckbox<cr><CR>")
       vim.keymap.set("n", "<C-r>", "<cmd>AutolistRecalculate<cr>")
   
       -- cycle list types with dot-repeat
       vim.keymap.set("n", "<leader>ln", require("autolist").cycle_next_dr, { expr = true })
       vim.keymap.set("n", "<leader>lp", require("autolist").cycle_prev_dr, { expr = true })
   
       -- if you don't want dot-repeat
       -- vim.keymap.set("n", "<leader>cn", "<cmd>AutolistCycleNext<cr>")
       -- vim.keymap.set("n", "<leader>cp", "<cmd>AutolistCycleNext<cr>")
   
       -- functions to recalculate list on edit
       vim.keymap.set("n", ">>", ">><cmd>AutolistRecalculate<cr>")
       vim.keymap.set("n", "<<", "<<<cmd>AutolistRecalculate<cr>")
       vim.keymap.set("n", "dd", "dd<cmd>AutolistRecalculate<cr>")
       vim.keymap.set("v", "d", "d<cmd>AutolistRecalculate<cr>")
     end,
   })
   @end
* TERMINAL
** Toggle Term
   Persist and toggle multiple terminals during an editing session.
   ___
   [GitHub]{https://github.com/akinsho/toggleterm.nvim}
   @code lua
   plug({
     'akinsho/toggleterm.nvim',
     version = "*",
     opts = {},
     config = function()
       require("toggleterm").setup()
   
       -- set keymaps to toggle toggleterm
       vim.keymap.set('n', '<c-b>', [[<Cmd>exe v:count1 . "ToggleTerm size=12 direction=horizontal"<CR>]],
         { desc = 'Toggle Term Horizontal' })
       vim.keymap.set('i', '<c-b>', [[<Cmd>exe v:count1 . "ToggleTerm size=12 direction=horizontal"<CR>]],
         { desc = 'Toggle Term Horizontal' })
       vim.keymap.set('t', '<c-b>', [[<Cmd>exe v:count1 . "ToggleTerm size=12 direction=horizontal"<CR>]],
         { desc = 'Toggle Term Horizontal' })
   
       vim.keymap.set('n', '<c-t>', [[<Cmd>exe v:count1 . "ToggleTerm size=80 direction=vertical"<CR>]],
         { desc = 'Toggle Term Vertical' })
       vim.keymap.set('i', '<c-t>', [[<Cmd>exe v:count1 . "ToggleTerm size=80 direction=vertical"<CR>]],
         { desc = 'Toggle Term Vertical' })
       vim.keymap.set('t', '<c-t>', [[<Cmd>exe v:count1 . "ToggleTerm size=80 direction=vertical"<CR>]],
         { desc = 'Toggle Term Vertical' })
   
       vim.keymap.set('n', '<c-f>', [[<Cmd>exe v:count1 . "ToggleTerm size=80 direction=float"<CR>]],
         { desc = 'Toggle Term Vertical' })
       vim.keymap.set('i', '<c-f>', [[<Cmd>exe v:count1 . "ToggleTerm size=80 direction=float"<CR>]],
         { desc = 'Toggle Term Vertical' })
       vim.keymap.set('t', '<c-f>', [[<Cmd>exe v:count1 . "ToggleTerm size=80 direction=float"<CR>]],
         { desc = 'Toggle Term Vertical' })
   
       local terminal = require("toggleterm.terminal").Terminal
   
       -- Set up task warrior Vit tui app toggle
       local vit = terminal:new({
         cmd = "vit",
         count = 1000,
         direction = "horizontal",
         hidden = true,
         close_on_exit = true,
         auto_scroll = false,
         start_in_insert = true,
       })
   
       vim.keymap.set({"n", "i", "t", "v"}, "<cm-v>", function () vit:toggle() end, {noremap = true, silent = true, desc = "Toggle Vit"})
   
       -- Set up powershell toggle term
       local powershell = terminal:new({
         cmd = "powershell.exe",
         count = 2,
         direction = "horizontal",
         hidden = false,
         close_on_exit = false,
         auto_scroll = true,
         start_in_insert = true,
       })
   
       vim.keymap.set({"n", "i", "t", "v"}, "<cm-p>", function () powershell:toggle() end, {noremap = true, silent = true, desc = "Toggle Powershell"})
     end,
   })
@end
** Flatten
   Open files from terminal buffers without creating a nested session.
   ___
   [GitHub]{https://github.com/willothy/flatten.nvim}
   @code lua
   plug({
      "willothy/flatten.nvim",
      branch = "1.0-dev",
      opts = function()
        ---@type Terminal?
        local saved_terminal
   
        return {
          window = {
            open = "alternate",
          },
          callbacks = {
            should_block = function(argv)
              -- Note that argv contains all the parts of the CLI command, including
              -- Neovim's path, commands, options and files.
              -- See: :help v:argv
   
              -- In this case, we would block if we find the `-b` flag
              -- This allows you to use `nvim -b file1` instead of
              -- `nvim --cmd 'let g:flatten_wait=1' file1`
              return vim.tbl_contains(argv, "-b")
   
              -- Alternatively, we can block if we find the diff-mode option
              -- return vim.tbl_contains(argv, "-d")
            end,
            pre_open = function()
              local term = require("toggleterm.terminal")
              local termid = term.get_focused_id()
              saved_terminal = term.get(termid)
            end,
            post_open = function(bufnr, winnr, ft, is_blocking)
              if is_blocking and saved_terminal then
                -- Hide the terminal while it's blocking
                saved_terminal:close()
              else
                -- If it's a normal file, just switch to its window
                vim.api.nvim_set_current_win(winnr)
              end
   
              -- If the file is a git commit, create one-shot autocmd to delete its buffer on write
              -- If you just want the toggleable terminal integration, ignore this bit
              if ft == "gitcommit" or ft == "gitrebase" then
                vim.api.nvim_create_autocmd("BufWritePost", {
                  buffer = bufnr,
                  once = true,
                  callback = vim.schedule_wrap(function()
                    vim.api.nvim_buf_delete(bufnr, {})
                  end),
                })
              end
            end,
            block_end = function()
              -- After blocking ends (for a git commit, etc), reopen the terminal
              vim.schedule(function()
                if saved_terminal then
                  saved_terminal:open()
                  saved_terminal = nil
                end
              end)
            end,
          },
        }
      end,
   })
   @end
* LAZY
  Set up the `lazy.nvim` plugin manager, use the `plugins` table to install and load plugins.
  See {** Lazy Helper Function} for the `plugin()` function.
  ___
  [GitHub]{https://github.com/folke/lazy.nvim}

  @code lua
  local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
  if not vim.loop.fs_stat(lazypath) then
    vim.fn.system {
      'git',
      'clone',
      '--filter=blob:none',
      'https://github.com/folke/lazy.nvim.git',
      '--branch=stable', -- latest stable release
      lazypath,
    }
  end
  vim.opt.rtp:prepend(lazypath)
  
  -- Plugins to be installed
  -- Help with plugin setup: https://github.com/folke/lazy.nvim#-structuring-your-plugins
  require('lazy').setup(plugins, {})
  
  
  -- open lazy menu
  vim.keymap.set("n", "<leader>;l", "<cmd>Lazy<cr>", { desc = "Lazy Plugin Manager" })
  @end
