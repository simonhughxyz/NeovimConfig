@document.meta
title: Neovim Config
description: My personal neovim config
authors: Simon H Moore
categories: [
  config
  neovim
  lua
]
tangle: {
  languages: {
    lua: ./lua/config.lua
  }
}
created: 2024-03-06T23:01:44+0100
updated: 2024-03-17T22:29:56+0100
version: 1.1.1
@end

* SETUP VARIABLES AND FUNCTIONS
** API Variables
   Declare common API variables, will be used throughout the config.
   ___
   @table
   | Variable | Value   | Descriptions           |
   |----------+---------+------------------------|
   | o        | vim.opt | Inbuilt vim options    |
   | g        | vim.g   | Inbuilt global options |
   | cmd      | vim.cmd | Run vim ex commands    |
   @end

  @code lua
  local o = vim.opt
  local g = vim.g
  local cmd = vim.cmd
  @end

** Global Print Table Function
   The `P()` function can be used globally to print a lua table for inspection.
   ___
  @code lua
  P = function(v)
    print(vim.inspect(v))
    return v
  end
   @end

** Lazy Helper Function
   The `plug()` function is used to add plugins to the `plugins` table.
   The `plugins` table will be used by lazy to install and load plugins.
   ___
  @code lua
  local plugins = {}
  
  function plug(plugin)
    plugins[#plugins +1] = plugin
  end
  @end

* OPTIONS
  Configure inbuilt Neovim options.
  ___
  @code lua
  o.autowrite = true           -- Enable auto write
  o.clipboard = "unnamedplus"  -- Sync with system clipboard
  o.completeopt = "menu,menuone,noselect"
  o.conceallevel = 3           -- Hide * markup for bold and italic
  o.confirm = true             -- Confirm to save changes before exiting modified buffer
  o.cursorline = true          -- Enable highlighting of the current line
  o.expandtab = true           -- Use spaces instead of tabs
  o.formatoptions = "jcroqlnt" -- tcqj
  o.grepformat = "%f:%l:%c:%m"
  o.grepprg = "rg --vimgrep"
  o.ignorecase = true      -- Ignore case
  o.inccommand = "nosplit" -- preview incremental substitute
  o.laststatus = 0
  o.list = true            -- Show some invisible characters (tabs...
  o.mouse = "a"            -- Enable mouse mode
  o.number = true          -- Print line number
  o.pumblend = 10          -- Popup blend
  o.pumheight = 10         -- Maximum number of entries in a popup
  o.relativenumber = true  -- Relative line numbers
  o.scrolloff = 4          -- Lines of context
  o.sessionoptions = { "buffers", "curdir", "tabpages", "winsize" }
  o.shiftround = true      -- Round indent
  o.shiftwidth = 2         -- Size of an indent
  o.shortmess:append({ W = true, I = true, c = true })
  o.showmode = false       -- Dont show mode since we have a statusline
  o.sidescrolloff = 8      -- Columns of context
  o.signcolumn = "yes"     -- Always show the signcolumn, otherwise it would shift the text each time
  o.smartcase = true       -- Don't ignore case with capitals
  o.smartindent = true     -- Insert indents automatically
  o.spelllang = { "en" }
  o.splitbelow = true      -- Put new windows below current
  o.splitright = true      -- Put new windows right of current
  o.tabstop = 2            -- Number of spaces tabs count for
  o.termguicolors = true   -- True color support
  o.timeoutlen = 300
  o.undofile = true
  o.undolevels = 10000
  o.updatetime = 200               -- Save swap file and trigger CursorHold
  o.wildmode = "longest:full,full" -- Command-line completion mode
  o.winminwidth = 5                -- Minimum window width
  o.wrap = false                   -- Disable line wrap

  if vim.fn.has("nvim-0.9.0") == 1 then
    o.splitkeep = "screen"
    o.shortmess:append({ C = true })
  end

  -- use powershell on windows
  if vim.fn.has("win32") == 1 then
    o.shell = vim.fn.executable "pwsh" == 1 and "pwsh" or "powershell"
    o.shellcmdflag =
    "-NoLogo -NoProfile -ExecutionPolicy RemoteSigned -Command [Console]::InputEncoding=[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;"
    o.shellredir = "-RedirectStandardOutput %s -NoNewWindow -Wait"
    o.shellpipe = "2>&1 | Out-File -Encoding UTF8 %s; exit LastExitCode"
    o.shellquote = ""
    o.shellxquote = ""
  end

  -- if in a wsl environment WSL_DISTRO_NAME should be set
  local in_wsl = os.getenv('WSL_DISTRO_NAME') ~= nil

  if in_wsl then
    -- Need to install win32yank in windows
    -- see https://mitchellt.com/2022/05/15/WSL-Neovim-Lua-and-the-Windows-Clipboard.html
    vim.g.clipboard = {
      name = "win32yank-wsl",
      copy = {
        ["+"] = "win32yank.exe -i --crlf",
        ["*"] = "win32yank.exe -i --crlf",
      },
      paste = {
        ["+"] = "win32yank.exe -o --lf",
        ["*"] = "win32yank.exe -o --lf",
      },
      cache_enabled = true,
    }
  end
  @end

* SYNTAX HIGHLIGHTS & COLOR
  Here I set up the color and syntax used in Neovim buffers.
  ___
** Options
  Enable true color support:
  ___
  @code lua
  o.termguicolors = true
  @end
** Gruvebox Colorscheme
   A port of gruvbox community theme to lua with treesitter and semantic highlights support.
   ___
   @code lua
   plug({
    "ellisonleao/gruvbox.nvim",
    enabled = true,
    lazy = false,
    priority = 10000,
    config = function()
      require("gruvbox").setup({
        transparent_mode = true,
        terminal_colors = false, -- disable gruvbox in terminal
        overrides = {
          Folded = { bg = "#202020" },
          -- fix markdown todo colors
          ["@lsp.type.class.markdown"] = { fg = "#000000" },
          ["@neorg.tags.ranged_verbatim.code_block"] = { bg = "#222222" },
        }
      })
      o.background = "dark"
      g.gruvbox_italic = true
      g.gruvbox_bold = false
      g.gruvbox_transparent_bg = true
      g.gruvbox_constrast_dark = "hard"
      g.gruvbox_improved_strings = false
      cmd([[colorscheme gruvbox]])
    end,
    })
   @end
** Indent Blankline
   This plugin adds indentation guides to all lines.
   ___
   @code lua
   plug({
     "lukas-reineke/indent-blankline.nvim",
     enabled = true,
     event = { "BufReadPost", "BufNewFile" },
     main = "ibl",
     opts = {
       exclude = {
         filetypes = {
           "help",
           "alpha",
           "dashboard",
           "fugitive",
           "neo-tree",
           "Trouble",
           "lazy",
           "mason",
           "notify",
           "toggleterm",
           "lazyterm",
           "lspinfo",
           "packer",
           "checkhealth",
           "help",
           "man",
           "gitcommit",
           "TelescopePrompt",
           "TelescopeResults",
         },
       },
     },
   })
   @end
** Colorizer
   Color highlighter, shows color of color codes
   ___
   @code lua
   plug({
     "norcalli/nvim-colorizer.lua",
     enabled = true,
     event = { "BufReadPost", "BufNewFile" },
     opts = {
       default_options = {
         RGB = true,
         RRGGBB = true,
         names = true,
         RRGGBBAA = true,
         rgb_fn = true,
         hsl_fn = true,
         css = true,
         css_fn = true,
         mode = "background",
       },
       "*", -- highlight all files
     },
   })
   @end
** Rainbow
   Use different colors for matching brackets.
   ___
   @code lua
   plug({
     "p00f/nvim-ts-rainbow",
     event = { "BufReadPost", "BufNewFile" },
     main = 'nvim-treesitter.configs',
     opts = {
       -- for nvim-ts-rainbow plugin
       rainbow = {
         enable = true,
         extended_mode = true,   -- Also highlight non-bracket delimiters like html tags, boolean or table: lang -> boolean
         max_file_lines = 10000, -- Do not enable for files with more than 10000 lines, int
         -- colors = {}, -- table of hex strings
         -- termcolors = {} -- table of colour name strings
       },
     }
   })
   @end
** Sentiment
   To highlight the outer pair of brackets/parenthesis.
   ___
   @code lua
   plug({
     "utilyre/sentiment.nvim",
     version = "*",
     event = "VeryLazy", -- keep for lazy loading
     opts = {
       -- config
     },
     init = function()
       -- `matchparen.vim` needs to be disabled manually in case of lazy loading
       vim.g.loaded_matchparen = 1
     end,
   })
   @end
* UI
  Here we configure the user interface for Neovim.
  ___
** Lualine
   A blazing fast and easy to configure Neovim statusline written in Lua.
   ___
   [GitHub]{https://github.com/nvim-lualine/lualine.nvim}
   @code lua
   local colors = {
    black = "#000000",
    white = "#ffffff",
    gray = "#444444",
    light_gray = "#666666",
    background = "#0c0c0c",
    green = "#005000",
    yellow = "#706000",
    blue = "#004090",
    paste = "#5518ab",
    red = "#800000",
   }
   
   local lualine_theme = {
    normal = {
      a = { fg = colors.white, bg = colors.green },
      b = { fg = colors.white, bg = colors.grey },
      c = { fg = colors.white, bg = colors.black },
    },
   
    insert = { a = { fg = colors.white, bg = colors.blue } },
    command = { a = { fg = colors.white, bg = colors.red } },
    visual = { a = { fg = colors.white, bg = colors.yellow } },
    replace = { a = { fg = colors.white, bg = colors.red } },
   
    inactive = {
      a = { fg = colors.white, bg = colors.black },
      b = { fg = colors.white, bg = colors.black },
      c = { fg = colors.light_gray, bg = colors.black },
    },
   }
   
   plug({
    {
      "nvim-lualine/lualine.nvim",
      event = "VeryLazy",
      opts = function()
        return {
          options = {
            theme = lualine_theme,
            component_separators = { left = "", right = "" },
            section_separators = { left = "|", right = "|" },
          },
          sections = {
            lualine_a = { "mode" },
            lualine_b = { "branch", "diff", "diagnostics" },
            lualine_c = {
              {
                "filename",
                path = 4
              },
            },
            lualine_x = { "encoding", "fileformat", "filetype" },
            lualine_y = { "progress" },
            lualine_z = { "location" },
          },
          inactive_sections = {
            lualine_a = {},
            lualine_b = {},
            lualine_c = {
              {
                "filename",
                path = 4
              },
            },
            lualine_x = { "location" },
            lualine_y = {},
            lualine_z = {},
          },
          tabline = {},
          winbar = {
            lualine_c = {
              {
                "filename",
                path = 4,
              },
              "navic"
            },
          },
          inactive_winbar = {
            lualine_c = {
                {
                  "filename",
                  path = 3
                }
              },
          },
          extensions = {},
        }
      end,
    },
   })
   @end
** Dressing
   Neovim plugin to improve the default vim.ui interfaces.
   ___
   [GitHub]{https://github.com/stevearc/dressing.nvim}
   @code lua
   plug({
     'stevearc/dressing.nvim',
     opts = {},
   })
   @end
** Notify
   A fancy, configurable notification manager for NeoVim.
   ___
   [GitHub]{https://github.com/rcarriga/nvim-notify}
   @code lua
   plug({
     "rcarriga/nvim-notify",
     enabled = true,
     lazy = false,
     config = function ()
       local notify = require("notify")
       notify.setup({
         minimum_width = 20,
         max_width = 50,
         max_height = 50,
         render = "compact",
         timeout = 1000,
         top_down = true
       })
       vim.notify = notify
       pcall(require('telescope').load_extension, "notify")
     end,
     keys = {
       {
         "<leader>;n",
         function () require("telescope").extensions.notify.notify() end,
         desc = "Notificiation History"
       },
     }
   })
   @end
* NEORG
  An all-encompassing tool based around structured note taking, project and task management, time tracking, slideshows, writing typeset documents and much more.
  ___
  [GitHub]{https://github.com/nvim-neorg/neorg}
  [Spec]{https://github.com/nvim-neorg/norg-specs/blob/main/1.0-specification.norg}
  @code lua
  plug({
    "nvim-neorg/neorg",
    build = ":Neorg sync-parsers",
    dependencies = {
      "nvim-lua/plenary.nvim",
      "Pocco81/true-zen.nvim",
      "nvim-neorg/neorg-telescope",
      "nvim-treesitter/nvim-treesitter",
      "nvim-treesitter/nvim-treesitter-textobjects",
      "hrsh7th/nvim-cmp",
    },
    opts = {
      load = {
        ["core.defaults"] = {}, -- Loads default behaviour
        ["core.concealer"] = {  -- Adds pretty icons to your documents
          config = {
            foldlevelstart = "0",
            icon_preset = "diamond",
            icons = {
              code_block = {
                width = "content",
                min_width = 85,
                conceal = true,
                padding = {
                  left = 1,
                  right = 1,
                }
              },
            },
          },
        },
        ["core.dirman"] = { -- Manages Neorg workspaces
          config = {
            workspaces = {
              documents = "~/Documents",
              notes = "~/Documents/Notes",
              career = "~/Documents/Career",
              profiles = "~/Documents/Profiles",
            },
            default_workspace = "documents",
          },
        },
        ["core.completion"] = {
          config = {
            engine = 'nvim-cmp',
            name = "[Norg]",
          }
        },
        ["core.integrations.nvim-cmp"] = {},
        ["core.qol.toc"] = {
          config = {
            close_split_on_jump = true,
            toc_split_placement = "right",
          }
        },
        ["core.export"] = {},
        ["core.export.markdown"] = {
          config = {
            extensions = "all",
          }
        },
        ["core.integrations.telescope"] = {},
        ["core.presenter"] = {
          config = {
            zen_mode = "truezen",
          }
        },
        ["core.journal"] = {
          config = {
            workspace = "journal",
            strategy = "flat",
          }
        },
        ["core.summary"] = {},
        ["core.esupports.metagen"] = { config = { type = "auto", update_date = true } },
      }
    },
    config = function()
      -- require("neorg").setup(neorg_opts)

      local neorg_callbacks = require("neorg.core.callbacks")

      neorg_callbacks.on_event("core.keybinds.events.enable_keybinds", function(_, keybinds)
        -- Map all the below keybinds only when the "norg" mode is active
        keybinds.map_event_to_mode("norg", {
          n = { -- Bind keys in normal mode
            { "<localleader>ff", "core.integrations.telescope.find_norg_files",  opts = { desc = 'Find Norg Files' } },
            { "<localleader>fl", "core.integrations.telescope.find_linkable",    opts = { desc = 'Find Linkable' } },
            { "<localleader>sh", "core.integrations.telescope.search_headings",  opts = { desc = 'Search Headings' } },
            { "<localleader>sw", "core.integrations.telescope.switch_workspace", opts = { desc = 'Switch Workspace' } },
            { "<localleader>cg", "core.looking-glass.magnify-code-block", opts = { desc = 'Looking Glass' } },
          },

          i = { -- Bind in insert mode
            { "<C-l>",  "core.integrations.telescope.insert_link",      opts = { desc = 'Insert Link' } },
            { "<C-L>", "core.integrations.telescope.insert_file_link", opts = { desc = 'Insert Neorg File Link' } },
          },
        }, {
          silent = true,
          noremap = true,
        })
      end)
    end,
  })
  @end
* TELESCOPE
** Telescope
   A highly extendable fuzzy finder over lists, files, buffers, git status and more.
   ___
   [GitHub]{https://github.com/nvim-telescope/telescope.nvim}
   @code lua
   plug({
    "nvim-telescope/telescope.nvim",
    enabled = true,
    lazy = false,
    dependencies = {
      'nvim-lua/plenary.nvim',
      -- Fuzzy Finder Algorithm which requires local dependencies to be built.
      -- Only load if `make` is available. Make sure you have the system
      -- requirements installed.
      {
        'nvim-telescope/telescope-fzf-native.nvim',
        -- NOTE: If you are having trouble with this installation,
        --       refer to the README for telescope-fzf-native for more instructions.
        build = 'make',
        cond = function()
          return vim.fn.executable 'make' == 1
        end,
      },
    },
    config = function()
      require('telescope').setup{
        defaults = {
          mappings = {
            n = {
              ['<c-d>'] = require('telescope.actions').delete_buffer
            }, -- n
            i = {
              ["<C-h>"] = "which_key",
              ['<c-d>'] = require('telescope.actions').delete_buffer
            } -- i
          } -- mappings
        }, -- defaults
      }
   
      -- Enable telescope fzf native, if installed
      pcall(require('telescope').load_extension, 'fzf')
   
      local ts = require('telescope.builtin')
   
      local fuzzy_search = function()
        -- You can pass additional configuration to telescope to change theme, layout, etc.
        ts.current_buffer_fuzzy_find(require('telescope.themes').get_dropdown {
          winblend = 10,
          previewer = false,
        })
      end
   
      -- Shortcuts
      vim.keymap.set('n', '<leader>?', ts.oldfiles, { desc = 'Find Recently Files' })
      vim.keymap.set('n', '<leader>,', ts.buffers, { desc = 'Find buffers' })
      vim.keymap.set('n', '<leader>/', fuzzy_search , { desc = 'Fuzzy Search in buffer' })
   
      -- Find Files
      vim.keymap.set('n', '<leader>ff', ts.find_files, { desc = 'Find Files' })
      vim.keymap.set('n', '<leader>fb', ts.buffers, { desc = 'Find Buffers' })
      vim.keymap.set('n', '<leader>fr', ts.oldfiles, { desc = 'Find Recent Files' })
      vim.keymap.set('n', '<leader>fg', ts.git_files, { desc = 'Find Git Files' })
      vim.keymap.set('n', '<leader>fs', ts.git_status, { desc = 'Find Git Status' })
      vim.keymap.set('n', '<leader>fS', ts.git_stash, { desc = 'Find Git Stash' })
   
      vim.keymap.set('n', '<leader>fd', function() ts.find_files({ cwd = '~/Documents' }) end,
        { desc = 'Find Documents' })
      vim.keymap.set('n', '<leader>fD', function() ts.find_files({ cwd = '~/Downloads' }) end,
        { desc = 'Find Downloads' })
      vim.keymap.set('n', '<leader>fp', function() ts.find_files({ cwd = '~/Projects' }) end, { desc = 'Find Projects' })
      vim.keymap.set('n', '<leader>fc', function() ts.find_files({ cwd = vim.fn.stdpath('config') }) end,
        { desc = 'Find Config' })
      vim.keymap.set('n', '<leader>fB', function() ts.find_files({ cwd = '~/.local/bin' }) end,
        { desc = 'Find Local Bin' })
   
      -- Search for content, help and functions
      vim.keymap.set('n', '<leader>sc', ts.git_commits, { desc = 'Search Git Commits' })
      vim.keymap.set('n', '<leader>st', ts.builtin, { desc = 'Search Telescope' })
      vim.keymap.set('n', '<leader>sh', ts.help_tags, { desc = 'Search Help' })
      vim.keymap.set('n', '<leader>sw', ts.grep_string, { desc = 'Search Current Word' })
      vim.keymap.set('n', '<leader>sg', ts.live_grep, { desc = 'Search by Grep' })
      vim.keymap.set('n', '<leader>sd', ts.diagnostics, { desc = 'Search Diagnostics' })
      vim.keymap.set('n', '<leader>sk', ts.keymaps, { desc = 'Search Keymaps' })
      vim.keymap.set('n', "<leader>s'", ts.marks, { desc = 'Search Marks' })
      vim.keymap.set('n', '<leader>s"', ts.registers, { desc = 'Search Registers' })
      vim.keymap.set('n', '<leader>sf', fuzzy_search , { desc = 'Fuzzy Search in buffer' })
   
    end,
   })
   @end

** Telescope Sessions Picker
   Load nvim session files from target directory.
   ___
   [GitHub]{https://github.com/JoseConseco/telescope_sessions_picker.nvim}
   @code lua
   plug({
    "JoseConseco/telescope_sessions_picker.nvim",
    enabled = true,
    lazy = true,
    config = function()
      require('telescope').load_extension('sessions_picker')
    end,
    keys = {
      { "<leader>sS",
        function() require('telescope').extensions.sessions_picker.sessions_picker() end,
        desc = "Search Neovim Sessions"
      },
    }
   })
   @end

** Telescope Tmux
   A Telescope.nvim extension for fuzzy-finding over tmux targets.
   ___
   [GitHub]{https://github.com/camgraff/telescope-tmux.nvim}
   @code lua
   plug({ -- https://github.com/camgraff/telescope-tmux.nvim
    "camgraff/telescope-tmux.nvim",
    enabled = true,
    lazy = true,
    config = function ()
      require('telescope').load_extension('tmux')
    end,
    keys = {
      { "<leader>ss",
        function() require('telescope').extensions.tmux.sessions({}) end,
        desc = "Search Tmux Sessions"
      },
    }
   })
   @end

** Telescope Tabs
   A Telescope.nvim extension for fuzzy-finding over vim tabs.
   ___
   [GitHub]{https://github.com/LukasPietzschmann/telescope-tabs}
   @code lua
   plug({
    'LukasPietzschmann/telescope-tabs',
    dependencies = { 'nvim-telescope/telescope.nvim' },
    enabled = true,
    lazy = true,
    config = function()
      require('telescope').load_extension 'telescope-tabs'
      require('telescope-tabs').setup {
        show_preview = true,
      }
    end,
    keys = {
      {"<tab>", mode = { "n" }, function() require("telescope-tabs").list_tabs() end, desc = "Open Tabs"}
    }
   })
   @end
* LAZY
  Set up the `lazy.nvim` plugin manager, use the `plugins` table to install and load plugins.
  See {** Lazy Helper Function} for the `plugin()` function.
  ___
  [GitHub]{https://github.com/folke/lazy.nvim}

  @code lua
  local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
  if not vim.loop.fs_stat(lazypath) then
    vim.fn.system {
      'git',
      'clone',
      '--filter=blob:none',
      'https://github.com/folke/lazy.nvim.git',
      '--branch=stable', -- latest stable release
      lazypath,
    }
  end
  vim.opt.rtp:prepend(lazypath)
  
  -- Plugins to be installed
  -- Help with plugin setup: https://github.com/folke/lazy.nvim#-structuring-your-plugins
  require('lazy').setup(plugins, {})
  
  
  -- open lazy menu
  vim.keymap.set("n", "<leader>;l", "<cmd>Lazy<cr>", { desc = "Lazy Plugin Manager" })
  @end
