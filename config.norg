@document.meta
title: Neovim Config
description: My personal neovim config
authors: Simon H Moore
categories: [
  config
  neovim
  lua
]
tangle: {
  languages: {
    lua: ./lua/config.lua
  }
}
created: 2024-03-06T23:01:44+0100
updated: 2024-03-17T21:59:39+0100
version: 1.1.1
@end

* SETUP VARIABLES AND FUNCTIONS
** API Variables
   Declare common API variables, will be used throughout the config.
   ___
   @table
   | Variable | Value   | Descriptions           |
   |----------+---------+------------------------|
   | o        | vim.opt | Inbuilt vim options    |
   | g        | vim.g   | Inbuilt global options |
   | cmd      | vim.cmd | Run vim ex commands    |
   @end

  @code lua
  local o = vim.opt
  local g = vim.g
  local cmd = vim.cmd
  @end

** Global Print Table Function
   The `P()` function can be used globally to print a lua table for inspection.
   ___
  @code lua
  P = function(v)
    print(vim.inspect(v))
    return v
  end
   @end

** Lazy Helper Function
   The `plug()` function is used to add plugins to the `plugins` table.
   The `plugins` table will be used by lazy to install and load plugins.
   ___
  @code lua
  local plugins = {}
  
  function plug(plugin)
    plugins[#plugins +1] = plugin
  end
  @end

* OPTIONS
  Configure inbuilt Neovim options.
  ___
  @code lua
  o.autowrite = true           -- Enable auto write
  o.clipboard = "unnamedplus"  -- Sync with system clipboard
  o.completeopt = "menu,menuone,noselect"
  o.conceallevel = 3           -- Hide * markup for bold and italic
  o.confirm = true             -- Confirm to save changes before exiting modified buffer
  o.cursorline = true          -- Enable highlighting of the current line
  o.expandtab = true           -- Use spaces instead of tabs
  o.formatoptions = "jcroqlnt" -- tcqj
  o.grepformat = "%f:%l:%c:%m"
  o.grepprg = "rg --vimgrep"
  o.ignorecase = true      -- Ignore case
  o.inccommand = "nosplit" -- preview incremental substitute
  o.laststatus = 0
  o.list = true            -- Show some invisible characters (tabs...
  o.mouse = "a"            -- Enable mouse mode
  o.number = true          -- Print line number
  o.pumblend = 10          -- Popup blend
  o.pumheight = 10         -- Maximum number of entries in a popup
  o.relativenumber = true  -- Relative line numbers
  o.scrolloff = 4          -- Lines of context
  o.sessionoptions = { "buffers", "curdir", "tabpages", "winsize" }
  o.shiftround = true      -- Round indent
  o.shiftwidth = 2         -- Size of an indent
  o.shortmess:append({ W = true, I = true, c = true })
  o.showmode = false       -- Dont show mode since we have a statusline
  o.sidescrolloff = 8      -- Columns of context
  o.signcolumn = "yes"     -- Always show the signcolumn, otherwise it would shift the text each time
  o.smartcase = true       -- Don't ignore case with capitals
  o.smartindent = true     -- Insert indents automatically
  o.spelllang = { "en" }
  o.splitbelow = true      -- Put new windows below current
  o.splitright = true      -- Put new windows right of current
  o.tabstop = 2            -- Number of spaces tabs count for
  o.termguicolors = true   -- True color support
  o.timeoutlen = 300
  o.undofile = true
  o.undolevels = 10000
  o.updatetime = 200               -- Save swap file and trigger CursorHold
  o.wildmode = "longest:full,full" -- Command-line completion mode
  o.winminwidth = 5                -- Minimum window width
  o.wrap = false                   -- Disable line wrap

  if vim.fn.has("nvim-0.9.0") == 1 then
    o.splitkeep = "screen"
    o.shortmess:append({ C = true })
  end

  -- use powershell on windows
  if vim.fn.has("win32") == 1 then
    o.shell = vim.fn.executable "pwsh" == 1 and "pwsh" or "powershell"
    o.shellcmdflag =
    "-NoLogo -NoProfile -ExecutionPolicy RemoteSigned -Command [Console]::InputEncoding=[Console]::OutputEncoding=[System.Text.Encoding]::UTF8;"
    o.shellredir = "-RedirectStandardOutput %s -NoNewWindow -Wait"
    o.shellpipe = "2>&1 | Out-File -Encoding UTF8 %s; exit LastExitCode"
    o.shellquote = ""
    o.shellxquote = ""
  end

  -- if in a wsl environment WSL_DISTRO_NAME should be set
  local in_wsl = os.getenv('WSL_DISTRO_NAME') ~= nil

  if in_wsl then
    -- Need to install win32yank in windows
    -- see https://mitchellt.com/2022/05/15/WSL-Neovim-Lua-and-the-Windows-Clipboard.html
    vim.g.clipboard = {
      name = "win32yank-wsl",
      copy = {
        ["+"] = "win32yank.exe -i --crlf",
        ["*"] = "win32yank.exe -i --crlf",
      },
      paste = {
        ["+"] = "win32yank.exe -o --lf",
        ["*"] = "win32yank.exe -o --lf",
      },
      cache_enabled = true,
    }
  end
  @end

* LAZY
  Set up the `lazy.nvim` plugin manager, use the `plugins` table to install and load plugins.
  See {** Lazy Helper Function} for the `plugin()` function.
  ___
  [GitHub]{https://github.com/folke/lazy.nvim}

  @code lua
  local lazypath = vim.fn.stdpath 'data' .. '/lazy/lazy.nvim'
  if not vim.loop.fs_stat(lazypath) then
    vim.fn.system {
      'git',
      'clone',
      '--filter=blob:none',
      'https://github.com/folke/lazy.nvim.git',
      '--branch=stable', -- latest stable release
      lazypath,
    }
  end
  vim.opt.rtp:prepend(lazypath)
  
  -- Plugins to be installed
  -- Help with plugin setup: https://github.com/folke/lazy.nvim#-structuring-your-plugins
  require('lazy').setup(plugins, {})
  
  
  -- open lazy menu
  vim.keymap.set("n", "<leader>;l", "<cmd>Lazy<cr>", { desc = "Lazy Plugin Manager" })
  @end
